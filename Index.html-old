<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Organizador de Fiesta 50 Aniversario - GitHub Ready</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/sql-wasm.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #ffd89b 0%, #19547b 100%);
            color: white;
            text-align: center;
            padding: 30px;
            position: relative;
        }
        
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            margin: 10px 0 0 0;
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .db-status {
            position: absolute;
            top: 15px;
            right: 20px;
            background: rgba(255,255,255,0.2);
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            backdrop-filter: blur(10px);
        }
        
        .db-connected {
            background: rgba(46, 213, 115, 0.3);
        }
        
        .tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
        }
        
        .tab {
            flex: 1;
            padding: 15px 20px;
            background: #f8f9fa;
            border: none;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            color: #495057;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }
        
        .tab:hover {
            background: #e9ecef;
        }
        
        .tab.active {
            background: white;
            color: #19547b;
            border-bottom-color: #19547b;
        }
        
        .tab-content {
            padding: 30px;
            min-height: 600px;
        }
        
        .tab-pane {
            display: none;
        }
        
        .tab-pane.active {
            display: block;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
        }
        
        th {
            background: linear-gradient(135deg, #19547b 0%, #ffd89b 100%);
            color: white;
            padding: 15px 10px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
        }
        
        td {
            padding: 12px 10px;
            border-bottom: 1px solid #e9ecef;
            font-size: 14px;
        }
        
        tbody tr:hover {
            background: #f8f9fa;
        }
        
        input, select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            box-sizing: border-box;
        }
        
        input:focus, select:focus {
            outline: none;
            border-color: #19547b;
            box-shadow: 0 0 0 2px rgba(25, 84, 123, 0.2);
        }
        
        .currency {
            text-align: right;
            font-weight: 500;
        }
        
        .pending {
            background: #fee;
            color: #c53030;
            font-weight: bold;
        }
        
        .positive-diff {
            color: #38a169;
            font-weight: bold;
        }
        
        .negative-diff {
            color: #c53030;
            font-weight: bold;
        }
        
        .summary-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 10px;
            margin: 15px 0;
            box-shadow: 0 8px 15px rgba(0,0,0,0.1);
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .summary-item {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            backdrop-filter: blur(10px);
        }
        
        .summary-item h3 {
            margin: 0 0 10px 0;
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .summary-item .amount {
            font-size: 2em;
            font-weight: bold;
            margin: 0;
        }
        
        .chart-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .btn {
            background: linear-gradient(135deg, #19547b 0%, #ffd89b 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            margin: 10px 5px;
            transition: transform 0.2s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #ff4757 0%, #c44569 100%);
        }
        
        .add-row {
            margin: 20px 0;
            text-align: center;
        }
        
        .instructions {
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 8px 8px 0;
        }
        
        .total-row {
            background: #f8f9fa;
            font-weight: bold;
            border-top: 2px solid #19547b;
        }
        
        .export-section {
            text-align: center;
            margin: 30px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .action-buttons {
            display: inline-flex;
            gap: 5px;
        }
        
        .btn-small {
            padding: 6px 12px;
            font-size: 12px;
            min-width: 60px;
        }
        
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #19547b;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="db-status" id="dbStatus">
                <span class="loading"></span> Inicializando BD...
            </div>
            <h1>🎉 Organizador de Fiesta</h1>
            <p>50 Aniversario de Bodas - Versión GitHub Pages</p>
        </div>
        
        <div class="tabs">
            <button class="tab active" onclick="showTab('aportes')">💰 Aportes de la Familia</button>
            <button class="tab" onclick="showTab('gastos')">💸 Gastos de la Fiesta</button>
            <button class="tab" onclick="showTab('resumen')">📊 Resumen General</button>
        </div>
        
        <div class="tab-content">
            <!-- HOJA 1: APORTES DE LA FAMILIA -->
            <div id="aportes" class="tab-pane active">
                <div class="instructions">
                    <strong>💡 Instrucciones:</strong> Registra los aportes de cada familiar. Los datos se guardan automáticamente en tu navegador (localStorage + SQLite). Haz respaldos regulares usando "Exportar Base de Datos". Los saldos pendientes aparecen resaltados en rojo.
                </div>
                
                <table id="tablaAportes">
                    <thead>
                        <tr>
                            <th>Nombre del Integrante</th>
                            <th>Monto Comprometido</th>
                            <th>Monto Entregado</th>
                            <th>Fecha de Aporte</th>
                            <th>Forma de Pago</th>
                            <th>Observaciones</th>
                            <th>Saldo Pendiente</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Los datos se cargarán desde SQLite -->
                    </tbody>
                </table>
                
                <div class="add-row">
                    <button class="btn" onclick="agregarNuevoAporte()">➕ Agregar Familiar</button>
                </div>
            </div>
            
            <!-- HOJA 2: GASTOS DE LA FIESTA -->
            <div id="gastos" class="tab-pane">
                <div class="instructions">
                    <strong>💡 Instrucciones:</strong> Registra todos los gastos de la fiesta por categorías. Los datos se almacenan automáticamente en SQLite. La diferencia entre costo estimado y real se calcula automáticamente.
                </div>
                
                <table id="tablaGastos">
                    <thead>
                        <tr>
                            <th>Categoría</th>
                            <th>Proveedor</th>
                            <th>Costo Estimado</th>
                            <th>Costo Real</th>
                            <th>Diferencia</th>
                            <th>Fecha de Pago</th>
                            <th>Pagado Por</th>
                            <th>Observaciones</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Los datos se cargarán desde SQLite -->
                    </tbody>
                    <tfoot>
                        <tr class="total-row">
                            <td><strong>TOTALES</strong></td>
                            <td></td>
                            <td class="currency" id="totalEstimado">₡0.00</td>
                            <td class="currency" id="totalReal">₡0.00</td>
                            <td class="currency" id="totalDiferencia">₡0.00</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
                
                <div class="add-row">
                    <button class="btn" onclick="agregarNuevoGasto()">➕ Agregar Gasto</button>
                </div>
            </div>
            
            <!-- HOJA 3: RESUMEN GENERAL -->
            <div id="resumen" class="tab-pane">
                <div class="summary-card">
                    <h2 style="text-align: center; margin-bottom: 30px;">📊 Resumen Financiero</h2>
                    <div class="summary-grid">
                        <div class="summary-item">
                            <h3>Aportes Comprometidos</h3>
                            <p class="amount" id="totalComprometido">₡0.00</p>
                        </div>
                        <div class="summary-item">
                            <h3>Aportes Recibidos</h3>
                            <p class="amount" id="totalRecibido">₡0.00</p>
                        </div>
                        <div class="summary-item">
                            <h3>Gastos Estimados</h3>
                            <p class="amount" id="resumenEstimado">₡0.00</p>
                        </div>
                        <div class="summary-item">
                            <h3>Gastos Reales</h3>
                            <p class="amount" id="resumenReal">₡0.00</p>
                        </div>
                        <div class="summary-item" style="grid-column: 1 / -1;">
                            <h3>Balance Final</h3>
                            <p class="amount" id="balanceFinal">₡0.00</p>
                        </div>
                    </div>
                </div>
                
                <div class="chart-container">
                    <h3>📈 Estadísticas</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;">
                        <div id="estadisticasAportes">
                            <h4>📊 Aportes por Estado</h4>
                            <div id="statsAportes"></div>
                        </div>
                        <div id="estadisticasGastos">
                            <h4>💸 Gastos por Categoría</h4>
                            <div id="statsGastos"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="export-section">
            <h3>💾 Gestión de Datos</h3>
            <p>Exporta tu base de datos o descarga un archivo Excel con toda la información.</p>
            <button class="btn" onclick="exportarExcel()">📊 Descargar Excel</button>
            <button class="btn" onclick="exportarBaseDatos()" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">💾 Exportar Base de Datos</button>
            <button class="btn" onclick="importarBaseDatos()" style="background: linear-gradient(135deg, #2ed573 0%, #17a2b8 100%);">📂 Importar Base de Datos</button>
            <button class="btn btn-danger" onclick="limpiarBaseDatos()">🗑️ Limpiar Todo</button>
            <input type="file" id="fileInput" accept=".db,.sqlite,.sqlite3" style="display: none;" onchange="cargarBaseDatos(event)">
        </div>
    </div>

    <script>
        let db;
        let SQL;

        // Inicializar SQLite
        async function initSQLite() {
            try {
                SQL = await initSqlJs({
                    locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/${file}`
                });

                // Intentar cargar BD existente del localStorage
                const savedDB = localStorage.getItem('fiesta_database');
                if (savedDB) {
                    const data = Uint8Array.from(atob(savedDB), c => c.charCodeAt(0));
                    db = new SQL.Database(data);
                } else {
                    db = new SQL.Database();
                    createTables();
                }

                updateDBStatus('🟢 BD Conectada', 'db-connected');
                cargarDatos();
            } catch (error) {
                console.error('Error inicializando SQLite:', error);
                updateDBStatus('❌ Error BD', '');
            }
        }

        function updateDBStatus(text, className) {
            const statusEl = document.getElementById('dbStatus');
            statusEl.innerHTML = text;
            statusEl.className = `db-status ${className}`;
        }

        function createTables() {
            const createAportesTable = `
                CREATE TABLE aportes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre TEXT NOT NULL,
                    monto_comprometido REAL DEFAULT 0,
                    monto_entregado REAL DEFAULT 0,
                    fecha_aporte TEXT,
                    forma_pago TEXT,
                    observaciones TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                );
            `;

            const createGastosTable = `
                CREATE TABLE gastos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    categoria TEXT NOT NULL,
                    proveedor TEXT,
                    costo_estimado REAL DEFAULT 0,
                    costo_real REAL DEFAULT 0,
                    fecha_pago TEXT,
                    pagado_por TEXT,
                    observaciones TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                );
            `;

            db.run(createAportesTable);
            db.run(createGastosTable);
            saveDatabase();
        }

        function saveDatabase() {
            if (db) {
                const data = db.export();
                const base64 = btoa(String.fromCharCode(...data));
                localStorage.setItem('fiesta_database', base64);
            }
        }

        function showTab(tabName) {
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.classList.remove('active');
            });
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
            
            if (tabName === 'resumen') {
                actualizarResumen();
            }
        }

        function cargarDatos() {
            cargarAportes();
            cargarGastos();
            actualizarTotales();
        }

        function cargarAportes() {
            const tbody = document.querySelector('#tablaAportes tbody');
            tbody.innerHTML = '';

            const stmt = db.prepare("SELECT * FROM aportes ORDER BY created_at DESC");
            while (stmt.step()) {
                const row = stmt.getAsObject();
                const saldo = (row.monto_comprometido || 0) - (row.monto_entregado || 0);
                
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td><input type="text" value="${row.nombre || ''}" onchange="actualizarAporte(${row.id}, 'nombre', this.value)"></td>
                    <td><input type="number" step="0.01" value="${row.monto_comprometido || 0}" onchange="actualizarAporte(${row.id}, 'monto_comprometido', this.value)"></td>
                    <td><input type="number" step="0.01" value="${row.monto_entregado || 0}" onchange="actualizarAporte(${row.id}, 'monto_entregado', this.value)"></td>
                    <td><input type="date" value="${row.fecha_aporte || ''}" onchange="actualizarAporte(${row.id}, 'fecha_aporte', this.value)"></td>
                    <td>
                        <select onchange="actualizarAporte(${row.id}, 'forma_pago', this.value)">
                            <option value="">Seleccionar...</option>
                            <option value="efectivo" ${row.forma_pago === 'efectivo' ? 'selected' : ''}>Efectivo</option>
                            <option value="transferencia" ${row.forma_pago === 'transferencia' ? 'selected' : ''}>Transferencia</option>
                            <option value="tarjeta" ${row.forma_pago === 'tarjeta' ? 'selected' : ''}>Tarjeta</option>
                        </select>
                    </td>
                    <td><input type="text" value="${row.observaciones || ''}" onchange="actualizarAporte(${row.id}, 'observaciones', this.value)"></td>
                    <td class="currency ${saldo > 0 ? 'pending' : ''}">₡${saldo.toFixed(2)}</td>
                    <td class="action-buttons">
                        <button class="btn btn-danger btn-small" onclick="eliminarAporte(${row.id})">🗑️</button>
                    </td>
                `;
                tbody.appendChild(tr);
            }
            stmt.free();
        }

        function cargarGastos() {
            const tbody = document.querySelector('#tablaGastos tbody');
            tbody.innerHTML = '';

            const stmt = db.prepare("SELECT * FROM gastos ORDER BY created_at DESC");
            while (stmt.step()) {
                const row = stmt.getAsObject();
                const diferencia = (row.costo_estimado || 0) - (row.costo_real || 0);
                
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>
                        <select onchange="actualizarGasto(${row.id}, 'categoria', this.value)">
                            <option value="">Seleccionar...</option>
                            <option value="banquete" ${row.categoria === 'banquete' ? 'selected' : ''}>🍽️ Banquete</option>
                            <option value="musica" ${row.categoria === 'musica' ? 'selected' : ''}>🎵 Música</option>
                            <option value="decoracion" ${row.categoria === 'decoracion' ? 'selected' : ''}>🎀 Decoración</option>
                            <option value="fotografia" ${row.categoria === 'fotografia' ? 'selected' : ''}>📸 Fotografía</option>
                            <option value="otros" ${row.categoria === 'otros' ? 'selected' : ''}>📦 Otros</option>
                        </select>
                    </td>
                    <td><input type="text" value="${row.proveedor || ''}" onchange="actualizarGasto(${row.id}, 'proveedor', this.value)"></td>
                    <td><input type="number" step="0.01" value="${row.costo_estimado || 0}" onchange="actualizarGasto(${row.id}, 'costo_estimado', this.value)"></td>
                    <td><input type="number" step="0.01" value="${row.costo_real || 0}" onchange="actualizarGasto(${row.id}, 'costo_real', this.value)"></td>
                    <td class="currency ${diferencia > 0 ? 'positive-diff' : diferencia < 0 ? 'negative-diff' : ''}">₡${diferencia.toFixed(2)}</td>
                    <td><input type="date" value="${row.fecha_pago || ''}" onchange="actualizarGasto(${row.id}, 'fecha_pago', this.value)"></td>
                    <td><input type="text" value="${row.pagado_por || ''}" onchange="actualizarGasto(${row.id}, 'pagado_por', this.value)"></td>
                    <td><input type="text" value="${row.observaciones || ''}" onchange="actualizarGasto(${row.id}, 'observaciones', this.value)"></td>
                    <td class="action-buttons">
                        <button class="btn btn-danger btn-small" onclick="eliminarGasto(${row.id})">🗑️</button>
                    </td>
                `;
                tbody.appendChild(tr);
            }
            stmt.free();
        }

        function agregarNuevoAporte() {
            const stmt = db.prepare("INSERT INTO aportes (nombre) VALUES (?)");
            stmt.run(['Nuevo familiar']);
            stmt.free();
            saveDatabase();
            cargarAportes();
            actualizarTotales();
        }

        function agregarNuevoGasto() {
            const stmt = db.prepare("INSERT INTO gastos (categoria) VALUES (?)");
            stmt.run(['']);
            stmt.free();
            saveDatabase();
            cargarGastos();
            actualizarTotales();
        }

        function actualizarAporte(id, campo, valor) {
            const stmt = db.prepare(`UPDATE aportes SET ${campo} = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?`);
            stmt.run([valor, id]);
            stmt.free();
            saveDatabase();
            
            // Recalcular saldo si es necesario
            if (campo === 'monto_comprometido' || campo === 'monto_entregado') {
                cargarAportes();
            }
            actualizarTotales();
        }

        function actualizarGasto(id, campo, valor) {
            const stmt = db.prepare(`UPDATE gastos SET ${campo} = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?`);
            stmt.run([valor, id]);
            stmt.free();
            saveDatabase();
            
            // Recalcular diferencia si es necesario
            if (campo === 'costo_estimado' || campo === 'costo_real') {
                cargarGastos();
            }
            actualizarTotales();
        }

        function eliminarAporte(id) {
            if (confirm('¿Estás seguro de que quieres eliminar este aporte?')) {
                const stmt = db.prepare("DELETE FROM aportes WHERE id = ?");
                stmt.run([id]);
                stmt.free();
                saveDatabase();
                cargarAportes();
                actualizarTotales();
            }
        }

        function eliminarGasto(id) {
            if (confirm('¿Estás seguro de que quieres eliminar este gasto?')) {
                const stmt = db.prepare("DELETE FROM gastos WHERE id = ?");
                stmt.run([id]);
                stmt.free();
                saveDatabase();
                cargarGastos();
                actualizarTotales();
            }
        }

        function actualizarTotales() {
            // Totales de gastos
            const gastosStmt = db.prepare("SELECT SUM(costo_estimado) as total_estimado, SUM(costo_real) as total_real FROM gastos");
            gastosStmt.step();
            const gastosData = gastosStmt.getAsObject();
            gastosStmt.free();

            const totalEstimado = gastosData.total_estimado || 0;
            const totalReal = gastosData.total_real || 0;

            document.getElementById('totalEstimado').textContent = `₡${totalEstimado.toFixed(2)}`;
            document.getElementById('totalReal').textContent = `₡${totalReal.toFixed(2)}`;
            document.getElementById('totalDiferencia').textContent = `₡${(totalEstimado - totalReal).toFixed(2)}`;
        }

        function actualizarResumen() {
            // Aportes
            const aportesStmt = db.prepare("SELECT SUM(monto_comprometido) as total_comprometido, SUM(monto_entregado) as total_recibido FROM aportes");
            aportesStmt.step();
            const aportesData = aportesStmt.getAsObject();
            aportesStmt.free();

            // Gastos
            const gastosStmt = db.prepare("SELECT SUM(costo_estimado) as total_estimado, SUM(costo_real) as total_real FROM gastos");
            gastosStmt.step();
            const gastosData = gastosStmt.getAsObject();
            gastosStmt.free();

            const totalComprometido = aportesData.total_comprometido || 0;
            const totalRecibido = aportesData.total_recibido || 0;
            const totalEstimado = gastosData.total_estimado || 0;
            const totalReal = gastosData.total_real || 0;
            const balance = totalRecibido - totalReal;

            document.getElementById('totalComprometido').textContent = `₡${totalComprometido.toFixed(2)}`;
            document.getElementById('totalRecibido').textContent = `₡${totalRecibido.toFixed(2)}`;
            document.getElementById('resumenEstimado').textContent = `₡${totalEstimado.toFixed(2)}`;
            document.getElementById('resumenReal').textContent = `₡${totalReal.toFixed(2)}`;
            
            const balanceElement = document.getElementById('balanceFinal');
            balanceElement.textContent = `₡${balance.toFixed(2)}`;
            
            if (balance < 0) {
                balanceElement.style.color = '#ff4757';
            } else if (balance > 0) {
                balanceElement.style.color = '#2ed573';
            } else {
                balanceElement.style.color = 'white';
            }
            
            // Actualizar estadísticas
            actualizarEstadisticas();
        }

        function actualizarEstadisticas() {
            // Estadísticas de aportes
            const aportesStatsStmt = db.prepare(`
                SELECT 
                    COUNT(*) as total_personas,
                    COUNT(CASE WHEN monto_entregado >= monto_comprometido THEN 1 END) as personas_al_dia,
                    COUNT(CASE WHEN monto_entregado < monto_comprometido THEN 1 END) as personas_pendientes
                FROM aportes WHERE nombre != ''
            `);
            aportesStatsStmt.step();
            const aportesStats = aportesStatsStmt.getAsObject();
            aportesStatsStmt.free();

            document.getElementById('statsAportes').innerHTML = `
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                    <p><strong>Total Familiares:</strong> ${aportesStats.total_personas}</p>
                    <p><strong>Al día:</strong> ${aportesStats.personas_al_dia}</p>
                    <p><strong>Pendientes:</strong> ${aportesStats.personas_pendientes}</p>
                </div>
            `;

            // Estadísticas de gastos
            const gastosStatsStmt = db.prepare(`
                SELECT 
                    categoria,
                    SUM(costo_real) as total_categoria
                FROM gastos 
                WHERE categoria != '' AND costo_real > 0
                GROUP BY categoria
                ORDER BY total_categoria DESC
            `);
            
            let gastosHTML = '<div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">';
            while (gastosStatsStmt.step()) {
                const row = gastosStatsStmt.getAsObject();
                const emoji = {
                    'banquete': '🍽️',
                    'musica': '🎵',
                    'decoracion': '🎀',
                    'fotografia': '📸',
                    'otros': '📦'
                };
                gastosHTML += `<p><strong>${emoji[row.categoria] || '📦'} ${row.categoria}:</strong> ₡${(row.total_categoria || 0).toFixed(2)}</p>`;
            }
            gastosStatsStmt.free();
            gastosHTML += '</div>';
            
            document.getElementById('statsGastos').innerHTML = gastosHTML;
        }

        function exportarExcel() {
            const wb = XLSX.utils.book_new();
            
            // Hoja 1: Aportes
            const aportesData = [['ID', 'Nombre del Integrante', 'Monto Comprometido', 'Monto Entregado', 'Fecha de Aporte', 'Forma de Pago', 'Observaciones', 'Saldo Pendiente']];
            
            const aportesStmt = db.prepare("SELECT * FROM aportes ORDER BY id");
            while (aportesStmt.step()) {
                const row = aportesStmt.getAsObject();
                const saldo = (row.monto_comprometido || 0) - (row.monto_entregado || 0);
                aportesData.push([
                    row.id,
                    row.nombre || '',
                    row.monto_comprometido || 0,
                    row.monto_entregado || 0,
                    row.fecha_aporte || '',
                    row.forma_pago || '',
                    row.observaciones || '',
                    saldo
                ]);
            }
            aportesStmt.free();
            
            const ws1 = XLSX.utils.aoa_to_sheet(aportesData);
            XLSX.utils.book_append_sheet(wb, ws1, 'Aportes de la Familia');
            
            // Hoja 2: Gastos
            const gastosData = [['ID', 'Categoría', 'Proveedor', 'Costo Estimado', 'Costo Real', 'Diferencia', 'Fecha de Pago', 'Pagado Por', 'Observaciones']];
            
            const gastosStmt = db.prepare("SELECT * FROM gastos ORDER BY id");
            while (gastosStmt.step()) {
                const row = gastosStmt.getAsObject();
                const diferencia = (row.costo_estimado || 0) - (row.costo_real || 0);
                gastosData.push([
                    row.id,
                    row.categoria || '',
                    row.proveedor || '',
                    row.costo_estimado || 0,
                    row.costo_real || 0,
                    diferencia,
                    row.fecha_pago || '',
                    row.pagado_por || '',
                    row.observaciones || ''
                ]);
            }
            gastosStmt.free();
            
            const ws2 = XLSX.utils.aoa_to_sheet(gastosData);
            XLSX.utils.book_append_sheet(wb, ws2, 'Gastos de la Fiesta');
            
            // Hoja 3: Resumen
            const aportesResumenStmt = db.prepare("SELECT SUM(monto_comprometido) as total_comprometido, SUM(monto_entregado) as total_recibido FROM aportes");
            aportesResumenStmt.step();
            const aportesResumen = aportesResumenStmt.getAsObject();
            aportesResumenStmt.free();

            const gastosResumenStmt = db.prepare("SELECT SUM(costo_estimado) as total_estimado, SUM(costo_real) as total_real FROM gastos");
            gastosResumenStmt.step();
            const gastosResumen = gastosResumenStmt.getAsObject();
            gastosResumenStmt.free();

            const resumenData = [];
            resumenData.push(['Concepto', 'Monto']);
            resumenData.push(['Total Aportes Comprometidos', aportesResumen.total_comprometido || 0]);
            resumenData.push(['Total Aportes Recibidos', aportesResumen.total_recibido || 0]);
            resumenData.push(['Total Gastos Estimados', gastosResumen.total_estimado || 0]);
            resumenData.push(['Total Gastos Reales', gastosResumen.total_real || 0]);
            resumenData.push(['Balance Final', (aportesResumen.total_recibido || 0) - (gastosResumen.total_real || 0)]);
            
            const ws3 = XLSX.utils.aoa_to_sheet(resumenData);
            XLSX.utils.book_append_sheet(wb, ws3, 'Resumen General');
            
            XLSX.writeFile(wb, 'Organizador_Fiesta_50_Aniversario_SQLite.xlsx');
            alert('¡Archivo Excel descargado exitosamente! 🎉');
        }

        function exportarBaseDatos() {
            if (!db) {
                alert('Base de datos no disponible');
                return;
            }

            const data = db.export();
            const blob = new Blob([data], { type: 'application/octet-stream' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `fiesta_50_aniversario_${new Date().toISOString().split('T')[0]}.db`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            alert('¡Base de datos exportada exitosamente! 💾');
        }

        function importarBaseDatos() {
            document.getElementById('fileInput').click();
        }

        function cargarBaseDatos(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const arrayBuffer = e.target.result;
                    const data = new Uint8Array(arrayBuffer);
                    
                    // Crear nueva base de datos con los datos importados
                    db = new SQL.Database(data);
                    saveDatabase();
                    cargarDatos();
                    
                    alert('¡Base de datos importada exitosamente! 📂');
                    updateDBStatus('🟢 BD Importada', 'db-connected');
                } catch (error) {
                    console.error('Error importando base de datos:', error);
                    alert('Error al importar la base de datos. Verifica que el archivo sea válido.');
                }
            };
            reader.readAsArrayBuffer(file);
        }

        function limpiarBaseDatos() {
            if (confirm('⚠️ ¿Estás seguro de que quieres eliminar TODOS los datos?\n\nEsta acción no se puede deshacer.')) {
                if (confirm('🚨 CONFIRMACIÓN FINAL: Se borrarán todos los aportes y gastos registrados.')) {
                    db.run("DELETE FROM aportes");
                    db.run("DELETE FROM gastos");
                    saveDatabase();
                    cargarDatos();
                    alert('✅ Base de datos limpiada exitosamente');
                }
            }
        }

        // Inicializar la aplicación cuando se carga la página
        window.addEventListener('load', async function() {
            await initSQLite();
        });
    </script>
</body>
</html>